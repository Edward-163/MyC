变量命名 字幕 下划线 数字 例如 mess_1

字符串 单双引号都算

str = "1\'22\"33"
print(3 * "*") // ***

str = "0123" // learn idx
str[-1] // 3
str[-2] // 2

str = " aa bb "
print(str.title()) # Aa Bb
print(str.upper())
print(str.lower())
print(str.lstrip()) # 去掉左侧空白,str内容不变
print(str.rstrip()) # 去掉右侧空白
print(str.strip())

print(3**2) # 3^2==9
print(10/3) # 3.33333

[] 列表 元素逗号分割
list=['a','b']
list.append('c')
list.insert(3,'d')
print(list)
print(list.pop()) # 弹出并返回栈顶元素d
print(list.pop(0)) # 弹出并返回idx==0的元素

new_list = list(range(1,3,1)) # range老规矩前闭后开,参3=步长,list函数把range函数结果转换成list

nums=[1,2,3]
max(nums)
min(nums)
sum(nums)

列表解析
squares=[val**2 for val in range(1,9)] # 1的平方 2的平方 ...  注意这个for没有冒号结尾

切片==列表的部分
slice=nums[0:2] # 老规矩idx前闭后开
slice=nums[0:]
slice=nums[-3:] # py设定-1代表最后一个,-2代表倒数第二个,依次类推       该行意思:取最后3个元素作切片
slice=nums[:2]
str = "0123"
str[0:3:2] // 02 参3是步进,默认步进1,实测感觉是在步进1的切片基础上,再按照步进2来切片
str[::-1] // 3210 字符串反转

复制列表
new_list=list[:]

元组==不可变列表

字典
dict={'key0':'val0'} # 值可以是py任何对象
dict['key1']='val1'
dict['key0']='val00'
del dict['key0']
for key,val in dict.items():
for key in sorted(dict.keys()):
for val in set(dict.values()):

# 船体给函数的是实参的副本,而不是原件
def func(list[:]):

# 传递任意数量实参给函数,适用于我不知道这个函数应该接收几个实参,干脆就写*param了
def func(*param):
def func(size, *param):

# 你写个a.py,里面有很多函数,现在你只想导入特定的函数
from module_name import func_name
from a import spec_func
或者
import a as aa
aa.spec_func()

类
class dog():
  def __init__(self): # self必不可少,且位置最前
    XXX
  def XXX
    xxx

文件
with open('dir\a.txt') as file_obj: # win环境是反斜杠 \
  content = file_obj.read() # 读取整个文件
  print(content)

with open('dir\a.txt') as file_obj: # win环境是反斜杠 \
  for line in file_obj
    print(rstrip(line) # 每行末尾有换行符,print输出也会默认加换行符,所以rstrip

with open('dir\a.txt','w') as file_obj: # 初级理解py的w写入模式==覆盖写
  file_obj.write("abc \n ")






