short int 也可以写成 short
long int 就是 long    // 所以整形在c中,默认省略最后的int??
long long int

union共用体:因为成员共用一块空间
https://blog.csdn.net/m0_57180439/article/details/120417270
由于共用空间这种特点就导致了，你改变c，i也会随之改变。这里和结构体是完全不一样的，结构体成员相互独立，但联合体不一样，改一个，其他的也会改变。
所以这里，在同一时间，你只能使用一个联合体成员，你使用c就不要用i，因为你c改变的时候，一定会影响到你i的使用，程序非常容易出问题。

long在32/64位都占4字节,指针占4/8字节

问:打不打印??
void test01(){
    int i=-1;
    for(;i<sizeof(int);i++){
        printf("%d \n",i);fflush(stdout);
    }
}
答:sizeof返回unsigned,而有符号-1转无符号??,在计算机补码看来,32位1拉满了都,没谁会比这个??大0xFF FF FF FF

混合运算    涉及 隐式转换
char short
int
unsigned Int
long        // 我建议忘掉long,直接到long lnog,因为c语言天坑,long和int极值是一样的
unsigned Long
long long
unsigned long long
float
double
long double

所有float都先转double运算
赋值运算,右边转成左边
char与short运算都转成int

c编译器 内置宏
__LINE__：在源代码中插入当前源代码行号；
__FILE__：在源文件中插入当前源文件名；(绝对路径)
__DATE__：在源文件中插入当前的编译日期 月日年
__TIME__：在源文件中插入当前编译时间； 时分秒
__STDC__：当要求程序严格遵循ANSI C标准时该标识被赋值为1；

__func__ is the predefine macro, and it is used to get the name of the current function. This macro is added in C99.
__func__是预定义宏，用于获取当前函数的名称。 此宏已添加到C99中。

结构体对齐   记载于study_test03
注意:字节对齐和编译器有关,甚至可以设置2,4,8,16,如vs默认8字节对齐,但这个设置好像不起作用,有int还是按照4字节来??涉及实际对齐字节
有指定按指定,不指定按下面算出来??

    1、含有数组：数组就是多个基本类型变量，比如  char a[10],就是有a[0] 到  a[9]  共10个char类型变量；
    2、含有结构体：比较嵌套的结构体中最大与本结构体中最大，取大的那个；
    3、预编译指令#pragma pack(n)手动设置     n取1 2 4 8 16
    上面三者取最小的,就是实际对齐单位；
成员顺序排列,因为成员要按字节对齐,所以中间可能留有空白,顺序会影响结构体大小
short地址必须是2的倍数
int地址必须是4的倍数        // test05中,被推翻掉了呀
double地址必须是8的倍数
终极大招:预定义#pragma pack(n) 来强制修改编译器字节对齐
https://blog.csdn.net/qq_40737025/article/details/106738762
结构体A应从offset为A内部最大成员的整数倍的地方开始存储
结构体嵌套有点绕!!

union对齐
找出类型对齐的最大值,如long long 8字节对齐
union的sizeof肯定是上面的n倍,如8n
多字段公用一片内存,sizeof与成员顺序无关

inline函数    内联函数
inline是加在实现上，就算加在声明上，编译器也会忽略掉。内联展开是在编译时进行的，只有链接的时候源文件之间才有关系。
所以内联要想跨源文件必须把实现写在头文件里。如果一个inline函数会在多个源文件中被用到，那么必须把它定义在头文件中。

函数宏     注意宏宇参数之间不能有空格
#define MAX(a,b) ((a)>(b)?:(a):(b))


/// 必须是2的幂次
_Aligns(12) unsigned int data;
_Aligns(2) char data;
_Aligns(3) char data;
_Aligns(16) unsigned int data;

白盒测试各种覆盖
逻辑覆盖率：语句覆盖<条件覆盖<判定覆盖<条件-判定覆盖<(条件)组合覆盖<路径覆盖
https://blog.csdn.net/qq_39722988/article/details/90411581
举个最简单的例子，方便理解：
   判定表达式：a>1 or b>1
     用判定覆盖设计的测试数据：
          a＝5 （判定表达式的值为“真”）
          a＝0 （判定表达式的值为“假”）// 这里不需要管b的取值，就已经满足判定覆盖的条件了。
     用条件覆盖设计的测试数据：// 我不理解的是条件覆盖率更低?,仔细看上面的博客,条件覆盖,例a&&b,只关心真假的时候这个表达式无论a取真假,还是b取真假,总体都是假,相较于判定覆盖少了总体为真的情况
           a＝5 （条件a>1的值为“真”）
           a＝0（条件a>1的值为“假”）
           b＝5 （条件b>1的值为“真”）
           b＝0 （条件b>1的值为“假”）


