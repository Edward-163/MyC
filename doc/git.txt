目标远程仓
fork目标远程仓
    目标分支(代码旧了就重新从目标远程仓fetch更新,我不建议把代码提交到此分支上)
    以目标分支为基础,checkout -b出来的众多分支(我建议不同人,不同版本,不同时间点来命名新分支,且push时选择同步推送分支名到fork目标远程仓)

// 举例:高版本仓某次提交,仅仅是给XX.c路径最外层加层目录(可能是处于梳理代码结构的目的),当你要把这个提交补丁打到低版本仓中,显然就会报错error: XX高版本dir/XX低版本dir/XX.c: No such file or directory
// 解决: -p2 Remove <n> leading path components (separated by slashes) from traditional diff paths. E.g., with -p2, a patch against a/dir/file will be applied directly to file. The default is 1.
// 我看完理解以为是-p1,去掉一层高版本dir,剩下的路径高低版本完全一样,以为能解决,实际还是报错,-p2才解决了
git apply --reject XXX.patch -p2
// XX.c文件改动了6出,上面命令打完后,所有改动全在.rej中   衍生问题:这么打没意义,现在还好是6处,万一是60处呢?这和手动挪修改有什么区别???

git-am之前， 你要首先git am –abort 一次，来放弃掉以前的am信息，这样才可以进行一次全新的am。 Apply a series of patches from a mailbox
git-am 可以一次合并一个文件，或者一个目录下所有的patch，或者你的邮箱目录下的patch.
git-am ~/patch/0001-trival-patch.patch // 据说am会把多个提交信息合成一个? apply则不会提交,待验证

其他
.gitignore只能忽略未被track的文件，而git本地缓存。如果某些文件已经被纳入了版本管理中，则修改.gitignore是无效的。
git rm --cached -r .
git add XXXdir // 只会add目录下面untrack文件
git commit -m 'update ignore'
// 修改最后一次提交的message,不涉及改代码
git commit --amend // 追加方便,一般后接git push -f


git bisect start 终点commit 起点commit //
git bisect good/bad
git bisect reset // quit


// 删除本地XXX分支
git branch -d XXX


git checkout -b branchXXX origin/master
git checkout -b huawei/csi/euleros_virtual/v2r9/6.2.0  origin/huawei/csi/euleros_virtual/v2r9/6.2.0


// 有一次写上git cherry-pick origin/XXX commitID 反而有问题,不写反而能正常pick
// 摘取一个commit,接到当前分支head后面
git cherry-pick commmitId
// 合补丁的时候,不同分支XXX.spec差距大,cherry-pick后你就会发现XXX.spec修改内容过多,华而不实,还是format-patch好使
// 从其他分支[commitA,commitB]摘过来,接到当前分支head后面
git cherry-pick commitA^..commitB     


// -n dry run 演戏,排练
git clear -n
// 删除untrack文件或者目录
git clear -f
git clear -d
git clean XXXdir -n // -n dryRun
git clean XXXdir -f


// git clone 最后可以指定目录名
   -b 指定检出分支
git clone -b branchXX https://XXX.git /home/XX   
git clone XX.git D:\XX


ubuntu上git默认的文本编辑器是nano，执行下面的命令将git的文本编辑器改为我们熟悉的vim
git config --global core.editor vim
// 仅为当前目录设置user.name user.email
git config --local usern.name "XXX"
git config --local usern.email "XXX"


// This form is to view the changes you made relative to the index 说白了查看 工作区-->还没暂存到index的改变(通常是git add之前)
git diff  XXX  
// 查看staged changes 等同--cached 说白了查看 工作区-->已经暂存到index的改变(通常是git add之后)
git diff --staged XXX  
git diff commit1 commit2    // (1,2]
git diff > 0003.patch


// 前开后闭,注意中间有.. 注意中间有.. 注意中间有..
git format-patch e4d14012cf3436f8c7f7306aa0bbd113effc7728~1..e4d14012cf3436f8c7f7306aa0bbd113effc7728 // 0001-virtiofs-add-vhost_user_fs-package.patch
git format-patch 35b1ce814ca6fea6a1207b4b935c55b229f3b6c3 –stdout          //--stdout输出到console查看,实践测试,不写第二个commitId,默认是HEAD
git format-patch HEAD^       //生成(HEAD^,HEAD]之间的patch,也就是head指向的commitId的patch,一般来说也就是最近一次提交的patch
git format-patch HEAD^^     //生成(HEAD^^,HEAD]之间的patch ,一般来说也就是最近2次提交的patch
git format-patch HEAD -1 –stdout        //生成(HEAD^,HEAD]之间的patch,也就是head指向的commitId的patch,一般来说也就是最近一次提交的patch
等价
git format-patch HEAD^..HEAD  –stdout
git format-patch HEAD -2 –stdout        //生成(HEAD^^,HEAD]之间的patch ,一般来说也就是最近2次提交的patch
等价
git format-patch HEAD^^..HEAD  –stdout
git format-patch -1 commitId // 生成commitId单次提交文件


// 添加vhost_user_fs/src/lib.rs等文件中,git status只会显示未跟踪vhost_user_fs/   ,(从其它地方cp而来的文件不显示,天坑)
// 列出所有未添加到索引中且没有被.gitignore文件忽略的文件
   --others 用于指示只显示未被跟踪的文件
   --exclude-standard 用于排除.gitignore文件中列出的文件
git ls-files --others --exclude-standard


git log --oneline
git log --pretty=oneline
    美[ˈprɪti] 英['prɪtɪ]
    adj.漂亮的；动听的；指不够真诚的褒奖；宜人的
    adv.相当；很
    n.心肝；衣饰
    网络可爱的；美丽的；俊俏的


// 合并origin/dev分支到(不写默认)当前分支,我不喜欢merge的原因是它会自动有个合并提交
git merge origin/dev


// -u=--set-upstream 把本地分支关联到远程主分支；为每个更新或推送的分支设置远程引用,若远程仓库没有<远程分支名>时，会自动创建该分支名
git push -u 仓库名 <分支名>            // 注意: 中间是空格 中间是空格 中间是空格
// 举例:从origin_o检出分支XXX_10086,魔改后你不写仓库名还想-uf,你以为会默认推送到origin上,但实际会报错提示,所以还是建议指定仓库名
git push -uf origin XXX_10086



// 更新fork仓库<<官方仓库
// 自己远程改了12个补丁,但官方远程更新了许多,此时自己的pr会显示与官方远程冲突,
// 添加官方远程源
git remote add origin_o https链接或者ssh链接
// 抓取官方仓库所有分支的更新(无则新增,有则更新),缺点:可能新增大量的分支
git fetch origin_o
// 需要特定分支可以在origin_o后面加上
git fetch origin_o branchXXX
// 额外:抓取后fork的origin和官方的origin_o分支进度不一样,我想用官方全覆盖fork怎么办呢?

// 把自己12个补丁"追加"到自己的最新的远程
// 多分支变基,origin_o/branchXXX分支(它作为newbase)和(不写默认)当前分支的共同父节点,提取当前分支的(父节点,当前分支尾提交点],并嫁接到origin_o/branchXXX的尾节点后
// 虽然上面fetch->多分支变基->解决冲突->rebase --continue->push -f 自己fork仓,完美解决问题 https://blog.csdn.net/weixin_35794878/article/details/128052626
git rebase -i origin_o/branchXXX

// 单分支变基,举例如下,变更最近两次"互不干扰"的提交的顺序
git rebase -i HEAD~2

// 修改某次提交的代码,pick改edit,剩下的看帮助提示也不难
git rebase -i commitId~1

git reset --mixed HEAD^ // 默认参数,保留修改,撤销本地提交和撤销git add    知识点:HEAD(指针) index(暂存区) workingTree==workDir(工作区)
git reset --sort HEAD^ // 保留修改,撤销本地提交,不撤销git add
git reset --hard HEAD^ // 修改无了,相当于回滚到上一个提交
git reset --hard origin/dev // 本地当前分支重置成和远程一样
https://vue3js.cn/interview/git/HEAD_tree_index.html#%E4%B8%80%E3%80%81head


本地推目录到github和gitee,每次都只能一个目录(但可以包含多个文件),想多个目录一起推,gitBash就卡死或者报错了
github生成的token可以直接在setting中添加,比gitBash在远程url中添加加token要更方便些.
早上到公司添加第二个token的时候提示Ed..账号已添加,token不让加了?!!
git remote set-url origin https://<your_token>@github.com/<username>/<repo>.git


github限制25M文件,太大gitBash推送会卡住,上传大文件[25M,100M]还要专门下载git lfs




// git pull 强制覆盖本地  -f 实操并未达到我想要的效果(远程代码直接覆盖本地),每次还得处理冲突,
// git fetch从远程下载最新的，而不尝试合并或rebase任何东西。
git fetch --all
// 然后git reset将主分支重置为您刚刚获取的内容。 --hard选项更改工作树中的所有文件以匹配origin/master中的文件。
git reset --hard origin/master

git reflog -9 // 通常错误操作会是HEAD@{0},所以通常回到错误的前一个记录上
git reset --mixed HEAD@{1}

可以直接按目录restore多个文件
git restore --staged patches/hulk_7.5/

git revert -n 此命令通过在版本库中创建一个“反向的”新提交来抵消原来提交的改动。通常Git会立即提交反转结果，但是也可以通过参数-n告诉Git先不要提交，
 这用于反转多个提交非常有用，运行多个git revert –n命令，Git会暂存所有的变更，然后做一次性提交。做反转操作的时候必须提供提交名称，
 反转总是按照从新到旧点的倒序来操作的，即最后的提交最先反转，这样可以避免一些不必要的冲突。

git show commitId --stat // 查看提交的文件列表


// 常见于修改未提交,但又急于检出新分支时,切的时候会提示你先提交或者stash
git stash save 'hyj'
git stash list
git stash apply stash@{编号,0是栈顶}
git stash apply stash@{XXX}
git stash drop stash@{编号,0是栈顶}
git stash pop  stash@{编号,0是栈顶}                         // 不推荐,等于apply+drop


status ahead behind
// ahead 当前分支比主分支多几个
// behind 当前分支比主分支少几个
git status
