gcc是个工具链,不是单个工具

源文件                  .c
预处理                 .c>>.i
编译compiling           .i>>.s    注意:.s称为汇编代码
汇编assembling            .s>>.o
链接linking               .o>>a.out或者hello

-E                       Preprocess only; do not compile, assemble or link.
-S                       Compile only; do not assemble or link.
-c                       Compile and assemble, but do not link.


preprocess 预处理指令 
如 gcc -E hello.c -o hello.i // 预处理完就结束
（1）宏定义指令，如 #define a b
对于这种伪指令，预编译所要做的是将程序中的所有a用b替换，但作为字符串常量的 a则不被替换。还有 #undef，则将取消对某个宏的定义，使以后该串的出现不再被替换。
（2）条件编译指令，如#ifdef，#ifndef，#else，#elif，#endif等。
这些伪指令的引入使得程序员可以通过定义不同的宏来决定编译程序对哪些代码进行处理。预编译程序将根据有关的文件，将那些不必要的代码过滤掉。
（3）头文件包含指令，如#include "FileName"或者#include 等。
在头文件中一般用伪指令#define定义了大量的宏（最常见的是字符常量），同时包含有各种外部符号的声明。采用头文件的目的主要是为了使某些定义可以供多个不同的C源程序使用

编译 compile   
如 gcc -S hello.i -o hello.s // 编译完就结束
Gcc检查代码规范性、语法错误等，以确定代码的实际要做的工作，检查无误后，Gcc把代码翻译成汇编语言

汇编 assemble
把*.s文件翻译成二进制机器指令文件*.o，如命令gcc -c hello.s -o hello.o，-c代表编译+汇编,but dont link。这步生成的文件是二进制文件

linking 链接
在这里涉及到一个重要的概念：函数库。
读者可以重新查看这个小程序，在这个程序中并没有定义”printf”的函数实现，且在预编译中包含进的”stdio.h”中也只有该函数的声明，而没有定义函数的实现，那么，
是在哪里实现”printf”函数的呢？最后的答案是：系统把这些函数实现都被做到名为libc.so.6的库文件中去了，在没有特别指定时，Gcc会到系统默认的搜索路径”/usr/lib”下进行查找，
也就是链接到libc.so.6库函数中去，这样就能实现函数”printf”了，而这也就是链接的作用
linux环境的动态链接库叫so,win环境叫dll
https://zhuanlan.zhihu.com/p/39219541#:~:text=%E7%BC%96%E8%AF%91%E5%99%A8%E7%BC%96%E8%AF%91%E5%8E%9F%E7%90%86%EF%BC%9A%E9%A2%84%E5%A4%84%E7%90%86%EF%BC%8C%E7%BC%96%E8%AF%91%EF%BC%8C%E6%B1%87%E7%BC%96%EF%BC%8C%E9%93%BE%E6%8E%A5%E5%90%84%E6%AD%A5%E9%AA%A4%E8%AF%A6%E8%A7%A3%201%20%EF%BC%881%EF%BC%89%E9%A2%84%E5%A4%84%E7%90%86%E9%98%B6%E6%AE%B5%20%E5%9C%A8%E8%AF%A5%E9%98%B6%E6%AE%B5%EF%BC%8C%E7%BC%96%E8%AF%91%E5%99%A8%E5%B0%86%E4%B8%8A%E8%BF%B0%E4%BB%A3%E7%A0%81%E4%B8%AD%E7%9A%84stdio.h%E7%BC%96%E8%AF%91%E8%BF%9B%E6%9D%A5%EF%BC%8C%E5%B9%B6%E4%B8%94%E7%94%A8%E6%88%B7%E5%8F%AF%E4%BB%A5%E4%BD%BF%E7%94%A8Gcc%E7%9A%84%E9%80%89%E9%A1%B9%E2%80%9D-E%E2%80%9D%E8%BF%9B%E8%A1%8C%E6%9F%A5%E7%9C%8B%EF%BC%8C%E8%AF%A5%E9%80%89%E9%A1%B9%E7%9A%84%E4%BD%9C%E7%94%A8%E6%98%AF%E8%AE%A9Gcc%E5%9C%A8%E9%A2%84%E5%A4%84%E7%90%86%E7%BB%93%E6%9D%9F%E5%90%8E%E5%81%9C%E6%AD%A2%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E3%80%82%20...%202%20%EF%BC%882%EF%BC%89%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5%20%E6%8E%A5%E4%B8%8B%E6%9D%A5%E8%BF%9B%E8%A1%8C%E7%9A%84%E6%98%AF%E7%BC%96%E8%AF%91%E9%98%B6%E6%AE%B5%EF%BC%8C%E5%9C%A8%E8%BF%99%E4%B8%AA%E9%98%B6%E6%AE%B5%E4%B8%AD%EF%BC%8CGcc%E9%A6%96%E5%85%88%E8%A6%81%E6%A3%80%E6%9F%A5%E4%BB%A3%E7%A0%81%E7%9A%84%E8%A7%84%E8%8C%83%E6%80%A7%E3%80%81%E6%98%AF%E5%90%A6%E6%9C%89%E8%AF%AD%E6%B3%95%E9%94%99%E8%AF%AF%E7%AD%89%EF%BC%8C%E4%BB%A5%E7%A1%AE%E5%AE%9A%E4%BB%A3%E7%A0%81%E7%9A%84%E5%AE%9E%E9%99%85%E8%A6%81%E5%81%9A%E7%9A%84%E5%B7%A5%E4%BD%9C%EF%BC%8C%E5%9C%A8%E6%A3%80%E6%9F%A5%E6%97%A0%E8%AF%AF%E5%90%8E%EF%BC%8CGcc%E6%8A%8A%E4%BB%A3%E7%A0%81%E7%BF%BB%E8%AF%91%E6%88%90%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80%E3%80%82,hello.s%20-o%20hello.o%EF%BC%8C%E5%85%B6%E4%B8%AD-c%E5%91%8A%E8%AF%89gcc%E8%BF%9B%E8%A1%8C%E6%B1%87%E7%BC%96%E5%A4%84%E7%90%86%E3%80%82%20...%204%20%EF%BC%884%EF%BC%89%E9%93%BE%E6%8E%A5%E9%98%B6%E6%AE%B5%20%E5%9C%A8%E6%88%90%E5%8A%9F%E7%BC%96%E8%AF%91%E4%B9%8B%E5%90%8E%EF%BC%8C%E5%B0%B1%E8%BF%9B%E5%85%A5%E4%BA%86%E9%93%BE%E6%8E%A5%E9%98%B6%E6%AE%B5%E3%80%82%20


gcc hello.c     // 默认生成a.out,所以 -o 自定义输出文件名     注意 -o 产生目标.i .s .o .out都可以,很灵活
gcc -c hello.c // 默认生成hello.o   再一次 gcc hello.o才会生成a.out
用到了-c，告诉gcc到汇编为止，不要进行链接。
链接就是将目标文件、启动代码、库文件链接成可执行文件的过程，
这个文件可被加载或拷贝到存储器执行。

size命令
size命令用于查看目标文件、库或可执行文件中各段及其总和的大小，是 GNU 二进制工具集 GNU Binutils 的一员。
size hello.o
[root@localhost test]# size hello.o
   text	   data	    bss	    dec	    hex	filename
    115	     80	      0	    195	     c3	hello.o


objdump也是gcc中的工具
gcc -g main.c // 输出a.out
objdump -dS a.out // -d是反汇编,-S是反汇编和源码混在一起展示出来.


7.3	gcc -g1 -g2 app.c    按最后的配置生效(测试正确,数字越大生成的信息越多)     gcc -g1 -g3 test06.c // 查看a.out大小即可
https://blog.csdn.net/hansel/article/details/5008700
-g 和 -ggdb 都是令 gcc 生成调试信息，但是它们也是有区别的
        -g
        该选项可以利用操作系统的“原生格式（native format）”生成调试
        信息。GDB 可以直接利用这个信息，其它调试器也可以使用这个调试信息
        -ggdb
        使 GCC 为 GDB 生成专用的更为丰富的调试信息，但是，此时就不能用其
        他的调试器来进行调试了 (如 ddx)
        -g 和 -ggdb 也是分级别的
        -g2
        这是默认的级别，此时产生的调试信息包括扩展的符号表、行号、局部
        或外部变量信息。
        -g3		数字越大信息越多
        包含级别2中的所有调试信息，以及源代码中定义的宏
        -g1
        级别1（-g1）不包含局部变量和与行号有关的调试信息，因此只能够用于回溯
        跟踪和堆栈转储之用。回溯跟踪指的是监视程序在运行过程中的函数调用历
        史，堆栈转储则是一种以原始的十六进制格式保存程序执行环境的方法，两者
        都是经常用到的调试手段。


-g		生成调试信息
-Wall	生成所有警告信息


gcc main.c stack.c -o main // 一站式 20.1多文件链接
